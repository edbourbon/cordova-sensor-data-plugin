{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/sensor-data-plugin/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;IAkBlC,oCAAiB;;;;IACrD;;;;;;;;;OASG;;;;;;;;;;;IAEH,gCAAK;;;;;;;;;;cACH,eAAwC,EACxC,aAAsC;QAEtC,MAAM,CAAC;KACR;IACD;;;;;;;;;;OAUG;;;;;;;;;;;;IAEH,kCAAO;;;;;;;;;;;cACL,eAAwC,EACxC,aAAsC;QAEtC,MAAM,CAAC;KACR;IACD;;;;;;;;;OASG;;;;;;;;;;;IAEH,gCAAK;;;;;;;;;;cACH,eAAwC,EACxC,aAAsC;QAEtC,MAAM,CAAC;KACR;;gBArDF,UAAU;;;QAYR,OAAO,EAAE;;;;iDAMT;;QAYA,OAAO,EAAE;;;;mDAMT;;QAWA,OAAO,EAAE;;;;iDAMT;;;;;;;;IApDU,gBAAgB;QAV5B,MAAM,CAAC;YACN,UAAU,EAAE,kBAAkB;YAC9B,MAAM,EAAE,oBAAoB;;YAC5B,SAAS,EAAE,kBAAkB;;YAC7B,IAAI,EAAE,EAAE;;YACR,OAAO,EAAE,EAAE;;YACX,gBAAgB,EAAE,EAAE;;YACpB,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,gBAAgB,EAqD5B;2BAxED;EAmBsC,iBAAiB;SAA1C,gBAAgB","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Plugin, Cordova, IonicNativePlugin } from \"@ionic-native/core\";\n/**\n * @name SensorDataPlugin\n * @description\n * The sensor data plugin is able to read the accelerometer data\n * from the device and send the retrieved data\n * to the frontend application.\n */\n@Plugin({\n  pluginName: \"SensorDataPlugin\",\n  plugin: \"sensor-data-plugin\", // npm package name, example: cordova-plugin-camera\n  pluginRef: \"SensorDataPlugin\", // the variable reference to call the plugin, example: navigator.geolocation\n  repo: \"\", // the github repository URL for the plugin\n  install: \"\", // OPTIONAL install command, in case the plugin requires variables\n  installVariables: [], // OPTIONAL the plugin requires variables\n  platforms: [\"Android\", \"iOS\"] // Array of platforms supported, example: ['Android', 'iOS']\n})\n@Injectable()\nexport class SensorDataPlugin extends IonicNativePlugin {\n  /**\n   * @description\n   * Starts the necessary services for accessing sensor data\n   *\n   * @param val\n   * @param successCallback Callback for successful execution\n   * @param errorCallback Callback, if error has occured\n   *\n   * @returns {string} Status of starting services\n   */\n  @Cordova()\n  start(\n    successCallback: (value: string) => void,\n    errorCallback: (value: string) => void\n  ): Promise<any> {\n    return;\n  }\n  /**\n   * @description\n   * Reads the current sensor data from the specific platform and\n   * sends it the frontend\n   *\n   * @param val\n   * @param successCallback Callback for successful execution\n   * @param errorCallback Callback, if error has occured\n   *\n   * @returns {string} Sensor data or error message as JSON-formatted string\n   */\n  @Cordova()\n  getData(\n    successCallback: (value: string) => void,\n    errorCallback: (value: string) => void\n  ): Promise<any> {\n    return;\n  }\n  /**\n   * @description\n   * Clears the saved sensor data on the device\n   *\n   * @param val\n   * @param successCallback Callback for successful execution\n   * @param errorCallback Callback, if error has occured\n   *\n   * @returns {string} Status of clearing sensor data\n   */\n  @Cordova()\n  clear(\n    successCallback: (value: string) => void,\n    errorCallback: (value: string) => void\n  ): Promise<any> {\n    return;\n  }\n}\n"]}